// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  isAdmin       Boolean   @default(false)
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Athlete {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  bibNo          String   @unique @default("0")
  country        Country  @relation(fields: [countryId], references: [id])
  countryId      String
  name           String
  gender         String
  dateOfBirth    DateTime
  classification String
  picture        String
  events         Event[]
  medals         Medal[]
  results        Result[]
}

model Country {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  name         String
  abbreviation String    @default("")
  flag         String    @default("https://www.countryflags.io/US/flat/64.png")
  athletes     Athlete[]
  medals       Medal[]
}

model Event {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  eventNumber String
  gender      String
  name        String
  date        DateTime
  time        String
  type        EventType
  athletes    Athlete[] // Relationship to athletes participating in this event
  results     Result[] // Relationship to results of this event
}

model Medal {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  type      MedalType // Gold, Silver, Bronze
  athlete   Athlete   @relation(fields: [athleteId], references: [id])
  athleteId String
  country   Country   @relation(fields: [countryId], references: [id])
  countryId String
}

model Result {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventNo], references: [id])
  eventNo   String
  athlete   Athlete  @relation(fields: [bibNo], references: [bibNo])
  bibNo     String
  rank      Int?
  result    String?
  points    Int?
}

enum MedalType {
  GOLD
  SILVER
  BRONZE
}

enum EventType {
  ShotPut
  Run
  LongJump
  DiscusThrow
  JavelinThrow
  HeighJump
}
