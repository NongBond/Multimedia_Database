generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  isAdmin       Boolean   @default(false)
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Athlete {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  bibNo          String   @unique @default("0")
  countryId      String
  name           String
  gender         String
  dateOfBirth    DateTime
  classification String
  picture        String
  country        Country  @relation(fields: [countryId], references: [id])
  events         Event[]  @relation("AthleteToEvent")
}

model Country {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  name         String
  abbreviation String    @default("")
  flag         String    @default("https://www.countryflags.io/US/flat/64.png")
  athletes     Athlete[]
}

model Event {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  eventNumber    String
  classification String
  stage          String
  status         String?
  gender         String
  name           String
  date           DateTime
  time           String
  athletes       Athlete[] @relation("AthleteToEvent")
}

model Result {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  bibNo     String
  rank      Int?
  result    String?
  points    Int?
}
